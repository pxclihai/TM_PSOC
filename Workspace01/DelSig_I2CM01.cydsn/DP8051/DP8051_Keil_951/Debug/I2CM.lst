C51 COMPILER V9.51   I2CM                                                                  10/28/2016 13:50:56 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE I2CM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\I2CM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\I2CM.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\D
                    -P8051\DP8051_Keil_951\Debug/I2CM.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\I2CM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: I2CM.c
   3          * Version 3.50
   4          *
   5          * Description:
   6          *  This file provides the source code of APIs for the I2C component.
   7          *  The actual protocol and operation code resides in the interrupt service
   8          *  routine file.
   9          *
  10          *******************************************************************************
  11          * Copyright 2008-2015, Cypress Semiconductor Corporation. All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "I2CM_PVT.h"
  18          
  19          
  20          /**********************************
  21          *      System variables
  22          **********************************/
  23          
  24          uint8 I2CM_initVar = 0u; /* Defines if component was initialized */
  25          
  26          volatile uint8 I2CM_state;  /* Current state of I2C FSM */
  27          
  28          
  29          /*******************************************************************************
  30          * Function Name: I2CM_Init
  31          ********************************************************************************
  32          *
  33          * Summary:
  34          *  Initializes I2C registers with initial values provided from customizer.
  35          *
  36          * Parameters:
  37          *  None.
  38          *
  39          * Return:
  40          *  None.
  41          *
  42          * Global variables:
  43          *  None.
  44          *
  45          * Reentrant:
  46          *  No.
  47          *
  48          *******************************************************************************/
  49          void I2CM_Init(void) 
  50          {
  51   1      #if (I2CM_FF_IMPLEMENTED)
  52   1          /* Configure fixed function block */
  53   1          I2CM_CFG_REG  = I2CM_DEFAULT_CFG;
C51 COMPILER V9.51   I2CM                                                                  10/28/2016 13:50:56 PAGE 2   

  54   1          I2CM_XCFG_REG = I2CM_DEFAULT_XCFG;
  55   1          I2CM_ADDR_REG = I2CM_DEFAULT_ADDR;
  56   1          I2CM_CLKDIV1_REG = LO8(I2CM_DEFAULT_DIVIDE_FACTOR);
  57   1          I2CM_CLKDIV2_REG = HI8(I2CM_DEFAULT_DIVIDE_FACTOR);
  58   1      
  59   1      #else
                  uint8 intState;
              
                  /* Configure control and interrupt sources */
                  I2CM_CFG_REG      = I2CM_DEFAULT_CFG;
                  I2CM_INT_MASK_REG = I2CM_DEFAULT_INT_MASK;
              
                  /* Enable interrupt generation in status */
                  intState = CyEnterCriticalSection();
                  I2CM_INT_ENABLE_REG |= I2CM_INTR_ENABLE;
                  CyExitCriticalSection(intState);
              
                  /* Configure bit counter */
                  #if (I2CM_MODE_SLAVE_ENABLED)
                      I2CM_PERIOD_REG = I2CM_DEFAULT_PERIOD;
                  #endif  /* (I2CM_MODE_SLAVE_ENABLED) */
              
                  /* Configure clock generator */
                  #if (I2CM_MODE_MASTER_ENABLED)
                      I2CM_MCLK_PRD_REG = I2CM_DEFAULT_MCLK_PRD;
                      I2CM_MCLK_CMP_REG = I2CM_DEFAULT_MCLK_CMP;
                  #endif /* (I2CM_MODE_MASTER_ENABLED) */
              #endif /* (I2CM_FF_IMPLEMENTED) */
  82   1      
  83   1      #if (I2CM_TIMEOUT_ENABLED)
                  I2CM_TimeoutInit();
              #endif /* (I2CM_TIMEOUT_ENABLED) */
  86   1      
  87   1          /* Configure internal interrupt */
  88   1          CyIntDisable    (I2CM_ISR_NUMBER);
  89   1          CyIntSetPriority(I2CM_ISR_NUMBER, I2CM_ISR_PRIORITY);
  90   1          #if (I2CM_INTERN_I2C_INTR_HANDLER)
  91   1              (void) CyIntSetVector(I2CM_ISR_NUMBER, &I2CM_ISR);
  92   1          #endif /* (I2CM_INTERN_I2C_INTR_HANDLER) */
  93   1      
  94   1          /* Set FSM to default state */
  95   1          I2CM_state = I2CM_SM_IDLE;
  96   1      
  97   1      #if (I2CM_MODE_SLAVE_ENABLED)
                  /* Clear status and buffers index */
                  I2CM_slStatus = 0u;
                  I2CM_slRdBufIndex = 0u;
                  I2CM_slWrBufIndex = 0u;
              
                  /* Configure matched address */
                  I2CM_SlaveSetAddress(I2CM_DEFAULT_ADDR);
              #endif /* (I2CM_MODE_SLAVE_ENABLED) */
 106   1      
 107   1      #if (I2CM_MODE_MASTER_ENABLED)
 108   1          /* Clear status and buffers index */
 109   1          I2CM_mstrStatus = 0u;
 110   1          I2CM_mstrRdBufIndex = 0u;
 111   1          I2CM_mstrWrBufIndex = 0u;
 112   1      #endif /* (I2CM_MODE_MASTER_ENABLED) */
 113   1      }
 114          
 115          
C51 COMPILER V9.51   I2CM                                                                  10/28/2016 13:50:56 PAGE 3   

 116          /*******************************************************************************
 117          * Function Name: I2CM_Enable
 118          ********************************************************************************
 119          *
 120          * Summary:
 121          *  Enables I2C operations.
 122          *
 123          * Parameters:
 124          *  None.
 125          *
 126          * Return:
 127          *  None.
 128          *
 129          * Global variables:
 130          *  None.
 131          *
 132          *******************************************************************************/
 133          void I2CM_Enable(void) 
 134          {
 135   1      #if (I2CM_FF_IMPLEMENTED)
 136   1          uint8 intState;
 137   1      
 138   1          /* Enable power to block */
 139   1          intState = CyEnterCriticalSection();
 140   1          I2CM_ACT_PWRMGR_REG  |= I2CM_ACT_PWR_EN;
 141   1          I2CM_STBY_PWRMGR_REG |= I2CM_STBY_PWR_EN;
 142   1          CyExitCriticalSection(intState);
 143   1      #else
                  #if (I2CM_MODE_SLAVE_ENABLED)
                      /* Enable bit counter */
                      uint8 intState = CyEnterCriticalSection();
                      I2CM_COUNTER_AUX_CTL_REG |= I2CM_CNT7_ENABLE;
                      CyExitCriticalSection(intState);
                  #endif /* (I2CM_MODE_SLAVE_ENABLED) */
              
                  /* Enable slave or master bits */
                  I2CM_CFG_REG |= I2CM_ENABLE_MS;
              #endif /* (I2CM_FF_IMPLEMENTED) */
 154   1      
 155   1      #if (I2CM_TIMEOUT_ENABLED)
                  I2CM_TimeoutEnable();
              #endif /* (I2CM_TIMEOUT_ENABLED) */
 158   1      }
 159          
 160          
 161          /*******************************************************************************
 162          * Function Name: I2CM_Start
 163          ********************************************************************************
 164          *
 165          * Summary:
 166          *  Starts the I2C hardware. Enables Active mode power template bits or clock
 167          *  gating as appropriate. It is required to be executed before I2C bus
 168          *  operation.
 169          *
 170          * Parameters:
 171          *  None.
 172          *
 173          * Return:
 174          *  None.
 175          *
 176          * Side Effects:
 177          *  This component automatically enables its interrupt.  If I2C is enabled !
C51 COMPILER V9.51   I2CM                                                                  10/28/2016 13:50:56 PAGE 4   

 178          *  without the interrupt enabled, it can lock up the I2C bus.
 179          *
 180          * Global variables:
 181          *  I2CM_initVar - This variable is used to check the initial
 182          *                             configuration, modified on the first
 183          *                             function call.
 184          *
 185          * Reentrant:
 186          *  No.
 187          *
 188          *******************************************************************************/
 189          void I2CM_Start(void) 
 190          {
 191   1          if (0u == I2CM_initVar)
 192   1          {
 193   2              I2CM_Init();
 194   2              I2CM_initVar = 1u; /* Component initialized */
 195   2          }
 196   1      
 197   1          I2CM_Enable();
 198   1          I2CM_EnableInt();
 199   1      }
 200          
 201          
 202          /*******************************************************************************
 203          * Function Name: I2CM_Stop
 204          ********************************************************************************
 205          *
 206          * Summary:
 207          *  Disables I2C hardware and disables I2C interrupt. Disables Active mode power
 208          *  template bits or clock gating as appropriate.
 209          *
 210          * Parameters:
 211          *  None.
 212          *
 213          * Return:
 214          *  None.
 215          *
 216          *******************************************************************************/
 217          void I2CM_Stop(void) 
 218          {
 219   1          I2CM_DisableInt();
 220   1      
 221   1      #if (I2CM_TIMEOUT_ENABLED)
                  I2CM_TimeoutStop();
              #endif  /* End (I2CM_TIMEOUT_ENABLED) */
 224   1      
 225   1      #if (I2CM_FF_IMPLEMENTED)
 226   1          {
 227   2              uint8 intState;
 228   2              uint16 blockResetCycles;
 229   2      
 230   2              /* Store registers effected by block disable */
 231   2              I2CM_backup.addr    = I2CM_ADDR_REG;
 232   2              I2CM_backup.clkDiv1 = I2CM_CLKDIV1_REG;
 233   2              I2CM_backup.clkDiv2 = I2CM_CLKDIV2_REG;
 234   2      
 235   2              /* Calculate number of cycles to reset block */
 236   2              blockResetCycles = ((uint16) ((uint16) I2CM_CLKDIV2_REG << 8u) | I2CM_CLKDIV1_REG) + 1u;
 237   2      
 238   2              /* Disable block */
 239   2              I2CM_CFG_REG &= (uint8) ~I2CM_CFG_EN_SLAVE;
C51 COMPILER V9.51   I2CM                                                                  10/28/2016 13:50:56 PAGE 5   

 240   2              /* Wait for block reset before disable power */
 241   2              CyDelayCycles((uint32) blockResetCycles);
 242   2      
 243   2              /* Disable power to block */
 244   2              intState = CyEnterCriticalSection();
 245   2              I2CM_ACT_PWRMGR_REG  &= (uint8) ~I2CM_ACT_PWR_EN;
 246   2              I2CM_STBY_PWRMGR_REG &= (uint8) ~I2CM_STBY_PWR_EN;
 247   2              CyExitCriticalSection(intState);
 248   2      
 249   2              /* Enable block */
 250   2              I2CM_CFG_REG |= (uint8) I2CM_ENABLE_MS;
 251   2      
 252   2              /* Restore registers effected by block disable. Ticket ID#198004 */
 253   2              I2CM_ADDR_REG    = I2CM_backup.addr;
 254   2              I2CM_ADDR_REG    = I2CM_backup.addr;
 255   2              I2CM_CLKDIV1_REG = I2CM_backup.clkDiv1;
 256   2              I2CM_CLKDIV2_REG = I2CM_backup.clkDiv2;
 257   2          }
 258   1      #else
              
                  /* Disable slave or master bits */
                  I2CM_CFG_REG &= (uint8) ~I2CM_ENABLE_MS;
              
              #if (I2CM_MODE_SLAVE_ENABLED)
                  {
                      /* Disable bit counter */
                      uint8 intState = CyEnterCriticalSection();
                      I2CM_COUNTER_AUX_CTL_REG &= (uint8) ~I2CM_CNT7_ENABLE;
                      CyExitCriticalSection(intState);
                  }
              #endif /* (I2CM_MODE_SLAVE_ENABLED) */
              
                  /* Clear interrupt source register */
                  (void) I2CM_CSR_REG;
              #endif /* (I2CM_FF_IMPLEMENTED) */
 275   1      
 276   1          /* Disable interrupt on stop (enabled by write transaction) */
 277   1          I2CM_DISABLE_INT_ON_STOP;
 278   1          I2CM_ClearPendingInt();
 279   1      
 280   1          /* Reset FSM to default state */
 281   1          I2CM_state = I2CM_SM_IDLE;
 282   1      
 283   1          /* Clear busy statuses */
 284   1      #if (I2CM_MODE_SLAVE_ENABLED)
                  I2CM_slStatus &= (uint8) ~(I2CM_SSTAT_RD_BUSY | I2CM_SSTAT_WR_BUSY);
              #endif /* (I2CM_MODE_SLAVE_ENABLED) */
 287   1      }
 288          
 289          
 290          /* [] END OF FILE */
C51 COMPILER V9.51   I2CM                                                                  10/28/2016 13:50:56 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION I2CM_Init (BEGIN)
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 53
0000 9049D6            MOV     DPTR,#049D6H
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
0006 9049C8            MOV     DPTR,#049C8H
0009 7481              MOV     A,#081H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 55
000C 9049CA            MOV     DPTR,#049CAH
000F 7408              MOV     A,#08H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 56
0012 9049DB            MOV     DPTR,#049DBH
0015 740F              MOV     A,#0FH
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0018 9049DC            MOV     DPTR,#049DCH
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
001D 9044C9            MOV     DPTR,#044C9H
0020 7480              MOV     A,#080H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
0023 7D07              MOV     R5,#07H
0025 7F0F              MOV     R7,#0FH
0027 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 91
002A 7C00        E     MOV     R4,#HIGH I2CM_ISR
002C 7D00        E     MOV     R5,#LOW I2CM_ISR
002E 7F0F              MOV     R7,#0FH
0030 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 95
0033 900000      R     MOV     DPTR,#I2CM_state
0036 7410              MOV     A,#010H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0039 900000      E     MOV     DPTR,#I2CM_mstrStatus
003C E4                CLR     A
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
003E 900000      E     MOV     DPTR,#I2CM_mstrRdBufIndex
0041 E4                CLR     A
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
0043 900000      E     MOV     DPTR,#I2CM_mstrWrBufIndex
0046 E4                CLR     A
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0048 22                RET     
             ; FUNCTION I2CM_Init (END)

             ; FUNCTION I2CM_Enable (BEGIN)
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
C51 COMPILER V9.51   I2CM                                                                  10/28/2016 13:50:56 PAGE 7   

                                           ; SOURCE LINE # 139
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#intState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 140
0008 9043A5            MOV     DPTR,#043A5H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4404              ORL     A,#04H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
0013 9043B5            MOV     DPTR,#043B5H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4404              ORL     A,#04H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
001E 900000      R     MOV     DPTR,#intState
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 158
0026 22                RET     
             ; FUNCTION I2CM_Enable (END)

             ; FUNCTION I2CM_Start (BEGIN)
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0000 900000      R     MOV     DPTR,#I2CM_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
0008 120000      R     LCALL   I2CM_Init
                                           ; SOURCE LINE # 194
000B 900000      R     MOV     DPTR,#I2CM_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
0011         ?C0003:
                                           ; SOURCE LINE # 197
0011 120000      R     LCALL   I2CM_Enable
                                           ; SOURCE LINE # 198
0014 9044C1            MOV     DPTR,#044C1H
0017 7480              MOV     A,#080H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
001A 22                RET     
             ; FUNCTION I2CM_Start (END)

             ; FUNCTION I2CM_Stop (BEGIN)
                                           ; SOURCE LINE # 217
C51 COMPILER V9.51   I2CM                                                                  10/28/2016 13:50:56 PAGE 8   

                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0000 9044C9            MOV     DPTR,#044C9H
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 231
0006 9049CA            MOV     DPTR,#049CAH
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 900000      E     MOV     DPTR,#I2CM_backup+03H
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 232
0010 9049DB            MOV     DPTR,#049DBH
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 900000      E     MOV     DPTR,#I2CM_backup+04H
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
001A 9049DC            MOV     DPTR,#049DCH
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 900000      E     MOV     DPTR,#I2CM_backup+05H
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 236
0024 9049DC            MOV     DPTR,#049DCH
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 7E00              MOV     R6,#00H
002B EF                MOV     A,R7
002C 7F00              MOV     R7,#00H
002E FE                MOV     R6,A
002F 9049DB            MOV     DPTR,#049DBH
0032 E0                MOVX    A,@DPTR
0033 FD                MOV     R5,A
0034 7C00              MOV     R4,#00H
0036 EE                MOV     A,R6
0037 4C                ORL     A,R4
0038 FE                MOV     R6,A
0039 EF                MOV     A,R7
003A 4D                ORL     A,R5
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 2401              ADD     A,#01H
003F FF                MOV     R7,A
0040 EE                MOV     A,R6
0041 3400              ADDC    A,#00H
0043 FE                MOV     R6,A
0044 900000      R     MOV     DPTR,#blockResetCycles
0047 EE                MOV     A,R6
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A EF                MOV     A,R7
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
004C 9049D6            MOV     DPTR,#049D6H
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
C51 COMPILER V9.51   I2CM                                                                  10/28/2016 13:50:56 PAGE 9   

0052 54FE              ANL     A,#0FEH
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
0057 900000      R     MOV     DPTR,#blockResetCycles
005A E0                MOVX    A,@DPTR
005B FE                MOV     R6,A
005C A3                INC     DPTR
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
005F E4                CLR     A
0060 FC                MOV     R4,A
0061 FD                MOV     R5,A
0062 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 244
0065 120000      E     LCALL   CyEnterCriticalSection
0068 900000      R     MOV     DPTR,#intState
006B EF                MOV     A,R7
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
006D 9043A5            MOV     DPTR,#043A5H
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
0073 54FB              ANL     A,#0FBH
0075 FF                MOV     R7,A
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 246
0078 9043B5            MOV     DPTR,#043B5H
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 54FB              ANL     A,#0FBH
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0083 900000      R     MOV     DPTR,#intState
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 250
008B 9049D6            MOV     DPTR,#049D6H
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 EF                MOV     A,R7
0091 4402              ORL     A,#02H
0093 FF                MOV     R7,A
0094 EF                MOV     A,R7
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
0096 900000      E     MOV     DPTR,#I2CM_backup+03H
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B 9049CA            MOV     DPTR,#049CAH
009E EF                MOV     A,R7
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
00A0 900000      E     MOV     DPTR,#I2CM_backup+03H
00A3 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   I2CM                                                                  10/28/2016 13:50:56 PAGE 10  

00A4 FF                MOV     R7,A
00A5 9049CA            MOV     DPTR,#049CAH
00A8 EF                MOV     A,R7
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
00AA 900000      E     MOV     DPTR,#I2CM_backup+04H
00AD E0                MOVX    A,@DPTR
00AE FF                MOV     R7,A
00AF 9049DB            MOV     DPTR,#049DBH
00B2 EF                MOV     A,R7
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
00B4 900000      E     MOV     DPTR,#I2CM_backup+05H
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 9049DC            MOV     DPTR,#049DCH
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 277
00BE 9049D6            MOV     DPTR,#049D6H
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 EF                MOV     A,R7
00C4 54EF              ANL     A,#0EFH
00C6 FF                MOV     R7,A
00C7 EF                MOV     A,R7
00C8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
00C9 9044D9            MOV     DPTR,#044D9H
00CC 7480              MOV     A,#080H
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 281
00CF 900000      R     MOV     DPTR,#I2CM_state
00D2 7410              MOV     A,#010H
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
00D5 22                RET     
             ; FUNCTION I2CM_Stop (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    353    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
