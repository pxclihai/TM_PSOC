C51 COMPILER V9.51   I2CM_PM                                                               10/28/2016 13:50:57 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE I2CM_PM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\I2CM_PM.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\I2CM_PM.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(
                    -.\DP8051\DP8051_Keil_951\Debug/I2CM_PM.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\I2CM_PM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: I2CM_PM.c
   3          * Version 3.50
   4          *
   5          * Description:
   6          *  This file provides low power mode APIs for the I2C component.
   7          *
   8          ********************************************************************************
   9          * Copyright 2008-2015, Cypress Semiconductor Corporation. All rights reserved.
  10          * You may use this file only in accordance with the license, terms, conditions,
  11          * disclaimers, and limitations in the end user license agreement accompanying
  12          * the software package with which this file was provided.
  13          *******************************************************************************/
  14          
  15          #include "I2CM_PVT.h"
  16          
  17          I2CM_BACKUP_STRUCT I2CM_backup =
  18          {
  19              I2CM_DISABLE,
  20          
  21          #if (I2CM_FF_IMPLEMENTED)
  22              I2CM_DEFAULT_XCFG,
  23              I2CM_DEFAULT_CFG,
  24              I2CM_DEFAULT_ADDR,
  25              LO8(I2CM_DEFAULT_DIVIDE_FACTOR),
  26              HI8(I2CM_DEFAULT_DIVIDE_FACTOR),
  27          #else  /* (I2CM_UDB_IMPLEMENTED) */
                  I2CM_DEFAULT_CFG,
              #endif /* (I2CM_FF_IMPLEMENTED) */
  30          
  31          #if (I2CM_TIMEOUT_ENABLED)
                  I2CM_DEFAULT_TMOUT_PERIOD,
                  I2CM_DEFAULT_TMOUT_INTR_MASK,
              #endif /* (I2CM_TIMEOUT_ENABLED) */
  35          };
  36          
  37          #if ((I2CM_FF_IMPLEMENTED) && (I2CM_WAKEUP_ENABLED))
                  volatile uint8 I2CM_wakeupSource;
              #endif /* ((I2CM_FF_IMPLEMENTED) && (I2CM_WAKEUP_ENABLED)) */
  40          
  41          
  42          /*******************************************************************************
  43          * Function Name: I2CM_SaveConfig
  44          ********************************************************************************
  45          *
  46          * Summary:
  47          *  The Enable wakeup from Sleep Mode selection influences this function
  48          *  implementation:
  49          *   Unchecked: Stores the component non-retention configuration registers.
  50          *   Checked:   Disables the master, if it was enabled before, and enables
  51          *              backup regulator of the I2C hardware. If a transaction intended
  52          *              for component executes during this function call, it waits until
  53          *              the current transaction is completed and I2C hardware is ready
C51 COMPILER V9.51   I2CM_PM                                                               10/28/2016 13:50:57 PAGE 2   

  54          *              to enter sleep mode. All subsequent I2C traffic is NAKed until
  55          *              the device is put into sleep mode.
  56          *
  57          * Parameters:
  58          *  None.
  59          *
  60          * Return:
  61          *  None.
  62          *
  63          * Global Variables:
  64          *  I2CM_backup - The global variable used to save the component
  65          *                            configuration and non-retention registers before
  66          *                            entering the sleep mode.
  67          *
  68          * Reentrant:
  69          *  No.
  70          *
  71          *******************************************************************************/
  72          void I2CM_SaveConfig(void) 
  73          {
  74   1      #if (I2CM_FF_IMPLEMENTED)
  75   1          #if (I2CM_WAKEUP_ENABLED)
                      uint8 intState;
                  #endif /* (I2CM_WAKEUP_ENABLED) */
  78   1      
  79   1          /* Store registers before enter low power mode */
  80   1          I2CM_backup.cfg     = I2CM_CFG_REG;
  81   1          I2CM_backup.xcfg    = I2CM_XCFG_REG;
  82   1          I2CM_backup.addr    = I2CM_ADDR_REG;
  83   1          I2CM_backup.clkDiv1 = I2CM_CLKDIV1_REG;
  84   1          I2CM_backup.clkDiv2 = I2CM_CLKDIV2_REG;
  85   1      
  86   1      #if (I2CM_WAKEUP_ENABLED)
                  /* Disable master */
                  I2CM_CFG_REG &= (uint8) ~I2CM_ENABLE_MASTER;
              
                  /* Enable backup regulator to keep block powered in low power mode */
                  intState = CyEnterCriticalSection();
                  I2CM_PWRSYS_CR1_REG |= I2CM_PWRSYS_CR1_I2C_REG_BACKUP;
                  CyExitCriticalSection(intState);
              
                  /* 1) Set force NACK to ignore I2C transactions;
                  *  2) Wait unti I2C is ready go to Sleep; !!
                  *  3) These bits are cleared on wake up.
                  */
                  /* Wait when block is ready for sleep */
                  I2CM_XCFG_REG |= I2CM_XCFG_FORCE_NACK;
                  while (0u == (I2CM_XCFG_REG & I2CM_XCFG_RDY_TO_SLEEP))
                  {
                  }
              
                  /* Setup wakeup interrupt */
                  I2CM_DisableInt();
                  (void) CyIntSetVector(I2CM_ISR_NUMBER, &I2CM_WAKEUP_ISR);
                  I2CM_wakeupSource = 0u;
                  I2CM_EnableInt();
              #endif /* (I2CM_WAKEUP_ENABLED) */
 111   1      
 112   1      #else
                  /* Store only address match bit */
                  I2CM_backup.control = (I2CM_CFG_REG & I2CM_CTRL_ANY_ADDRESS_MASK);
              #endif /* (I2CM_FF_IMPLEMENTED) */
C51 COMPILER V9.51   I2CM_PM                                                               10/28/2016 13:50:57 PAGE 3   

 116   1      
 117   1      #if (I2CM_TIMEOUT_ENABLED)
                  I2CM_TimeoutSaveConfig();
              #endif /* (I2CM_TIMEOUT_ENABLED) */
 120   1      }
 121          
 122          
 123          /*******************************************************************************
 124          * Function Name: I2CM_Sleep
 125          ********************************************************************************
 126          *
 127          * Summary:
 128          *  This is the preferred method to prepare the component before device enters
 129          *  sleep mode. The Enable wakeup from Sleep Mode selection influences this
 130          *  function implementation:
 131          *   Unchecked: Checks current I2C component state, saves it, and disables the
 132          *              component by calling I2C_Stop() if it is currently enabled.
 133          *              I2C_SaveConfig() is then called to save the component
 134          *              non-retention configuration registers.
 135          *   Checked:   If a transaction intended for component executes during this
 136          *              function call, it waits until the current transaction is
 137          *              completed. All subsequent I2C traffic intended for component
 138          *              is NAKed until the device is put to sleep mode. The address
 139          *              match event wakes up the device.
 140          *
 141          * Parameters:
 142          *  None.
 143          *
 144          * Return:
 145          *  None.
 146          *
 147          * Reentrant:
 148          *  No.
 149          *
 150          *******************************************************************************/
 151          void I2CM_Sleep(void) 
 152          {
 153   1      #if (I2CM_WAKEUP_ENABLED)
                  /* Do not enable block after exit low power mode if it is wakeup source */
                  I2CM_backup.enableState = I2CM_DISABLE;
              
                  #if (I2CM_TIMEOUT_ENABLED)
                      I2CM_TimeoutStop();
                  #endif /* (I2CM_TIMEOUT_ENABLED) */
              
              #else
 162   1          /* Store enable state */
 163   1          I2CM_backup.enableState = (uint8) I2CM_IS_ENABLED;
 164   1      
 165   1          if (0u != I2CM_backup.enableState)
 166   1          {
 167   2              I2CM_Stop();
 168   2          }
 169   1      #endif /* (I2CM_WAKEUP_ENABLED) */
 170   1      
 171   1          I2CM_SaveConfig();
 172   1      }
 173          
 174          
 175          /*******************************************************************************
 176          * Function Name: I2CM_RestoreConfig
 177          ********************************************************************************
C51 COMPILER V9.51   I2CM_PM                                                               10/28/2016 13:50:57 PAGE 4   

 178          *
 179          * Summary:
 180          *  The Enable wakeup from Sleep Mode selection influences this function
 181          *  implementation:
 182          *   Unchecked: Restores the component non-retention configuration registers
 183          *              to the state they were in before I2C_Sleep() or I2C_SaveConfig()
 184          *              was called.
 185          *   Checked:   Disables the backup regulator of the I2C hardware. Sets up the
 186          *              regular component interrupt handler and generates the component
 187          *              interrupt if it was wake up source to release the bus and
 188          *              continue in-coming I2C transaction.
 189          *
 190          * Parameters:
 191          *  None.
 192          *
 193          * Return:
 194          *  None.
 195          *
 196          * Global Variables:
 197          *  I2CM_backup - The global variable used to save the component
 198          *                            configuration and non-retention registers before
 199          *                            exiting the sleep mode.
 200          *
 201          * Reentrant:
 202          *  No.
 203          *
 204          * Side Effects:
 205          *  Calling this function before I2CM_SaveConfig() or
 206          *  I2CM_Sleep() will lead to unpredictable results.
 207          *
 208          *******************************************************************************/
 209          void I2CM_RestoreConfig(void) 
 210          {
 211   1      #if (I2CM_FF_IMPLEMENTED)
 212   1          uint8 intState;
 213   1      
 214   1          if (I2CM_CHECK_PWRSYS_I2C_BACKUP)
 215   1          /* Low power mode was Sleep - backup regulator is enabled */
 216   1          {
 217   2              /* Enable backup regulator in active mode */
 218   2              intState = CyEnterCriticalSection();
 219   2              I2CM_PWRSYS_CR1_REG &= (uint8) ~I2CM_PWRSYS_CR1_I2C_REG_BACKUP;
 220   2              CyExitCriticalSection(intState);
 221   2      
 222   2              /* Restore master */
 223   2              I2CM_CFG_REG = I2CM_backup.cfg;
 224   2          }
 225   1          else
 226   1          /* Low power mode was Hibernate - backup regulator is disabled. All registers are cleared */
 227   1          {
 228   2          #if (I2CM_WAKEUP_ENABLED)
                      /* Disable power to block before register restore */
                      intState = CyEnterCriticalSection();
                      I2CM_ACT_PWRMGR_REG  &= (uint8) ~I2CM_ACT_PWR_EN;
                      I2CM_STBY_PWRMGR_REG &= (uint8) ~I2CM_STBY_PWR_EN;
                      CyExitCriticalSection(intState);
              
                      /* Enable component in I2C_Wakeup() after register restore */
                      I2CM_backup.enableState = I2CM_ENABLE;
                  #endif /* (I2CM_WAKEUP_ENABLED) */
 238   2      
 239   2              /* Restore component registers after Hibernate */
C51 COMPILER V9.51   I2CM_PM                                                               10/28/2016 13:50:57 PAGE 5   

 240   2              I2CM_XCFG_REG    = I2CM_backup.xcfg;
 241   2              I2CM_CFG_REG     = I2CM_backup.cfg;
 242   2              I2CM_ADDR_REG    = I2CM_backup.addr;
 243   2              I2CM_CLKDIV1_REG = I2CM_backup.clkDiv1;
 244   2              I2CM_CLKDIV2_REG = I2CM_backup.clkDiv2;
 245   2          }
 246   1      
 247   1      #if (I2CM_WAKEUP_ENABLED)
                  I2CM_DisableInt();
                  (void) CyIntSetVector(I2CM_ISR_NUMBER, &I2CM_ISR);
                  if (0u != I2CM_wakeupSource)
                  {
                      /* Generate interrupt to process incoming transaction */
                      I2CM_SetPendingInt();
                  }
                  I2CM_EnableInt();
              #endif /* (I2CM_WAKEUP_ENABLED) */
 257   1      
 258   1      #else
                  I2CM_CFG_REG = I2CM_backup.control;
              #endif /* (I2CM_FF_IMPLEMENTED) */
 261   1      
 262   1      #if (I2CM_TIMEOUT_ENABLED)
                  I2CM_TimeoutRestoreConfig();
              #endif /* (I2CM_TIMEOUT_ENABLED) */
 265   1      }
 266          
 267          
 268          /*******************************************************************************
 269          * Function Name: I2CM_Wakeup
 270          ********************************************************************************
 271          *
 272          * Summary:
 273          *  This is the preferred method to prepare the component for active mode
 274          *  operation (when device exits sleep mode). The Enable wakeup from Sleep Mode
 275          *  selection influences this function implementation:
 276          *   Unchecked: Restores the component non-retention configuration registers
 277          *              by calling I2C_RestoreConfig(). If the component was enabled
 278          *              before the I2C_Sleep() function was called, I2C_Wakeup()
 279          *              re-enables it.
 280          *   Checked:   Enables  master functionality if it was enabled before sleep,
 281          *              and disables the backup regulator of the I2C hardware.
 282          *              The incoming transaction continues as soon as the regular
 283          *              I2C interrupt handler is set up (global interrupts has to be
 284          *              enabled to service I2C component interrupt).
 285          *
 286          * Parameters:
 287          *  None.
 288          *
 289          * Return:
 290          *  None.
 291          *
 292          * Reentrant:
 293          *  No.
 294          *
 295          * Side Effects:
 296          *  Calling this function before I2CM_SaveConfig() or
 297          *  I2CM_Sleep() will lead to unpredictable results.
 298          *
 299          *******************************************************************************/
 300          void I2CM_Wakeup(void) 
 301          {
C51 COMPILER V9.51   I2CM_PM                                                               10/28/2016 13:50:57 PAGE 6   

 302   1          I2CM_RestoreConfig();
 303   1      
 304   1          /* Restore component enable state */
 305   1          if (0u != I2CM_backup.enableState)
 306   1          {
 307   2              I2CM_Enable();
 308   2              I2CM_EnableInt();
 309   2          }
 310   1          else
 311   1          {
 312   2          #if (I2CM_TIMEOUT_ENABLED)
                      I2CM_TimeoutEnable();
                  #endif /* (I2CM_TIMEOUT_ENABLED) */
 315   2          }
 316   1      }
 317          
 318          
 319          /* [] END OF FILE */
C51 COMPILER V9.51   I2CM_PM                                                               10/28/2016 13:50:57 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION I2CM_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 80
0000 9049D6            MOV     DPTR,#049D6H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#I2CM_backup+02H
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
000A 9049C8            MOV     DPTR,#049C8H
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F 900000      R     MOV     DPTR,#I2CM_backup+01H
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
0014 9049CA            MOV     DPTR,#049CAH
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#I2CM_backup+03H
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
001E 9049DB            MOV     DPTR,#049DBH
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 900000      R     MOV     DPTR,#I2CM_backup+04H
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
0028 9049DC            MOV     DPTR,#049DCH
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D 900000      R     MOV     DPTR,#I2CM_backup+05H
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
0032 22                RET     
             ; FUNCTION I2CM_SaveConfig (END)

             ; FUNCTION I2CM_Sleep (BEGIN)
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 163
0000 9043A5            MOV     DPTR,#043A5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 30E204            JNB     ACC.2,?C0002
0009 7F01              MOV     R7,#01H
000B 8002              SJMP    ?C0003
000D         ?C0002:
000D 7F00              MOV     R7,#00H
000F         ?C0003:
000F 900000      R     MOV     DPTR,#I2CM_backup
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   I2CM_PM                                                               10/28/2016 13:50:57 PAGE 8   

                                           ; SOURCE LINE # 165
0014 900000      R     MOV     DPTR,#I2CM_backup
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 6003              JZ      ?C0004
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
001C 120000      E     LCALL   I2CM_Stop
                                           ; SOURCE LINE # 168
001F         ?C0004:
                                           ; SOURCE LINE # 171
001F 120000      R     LCALL   I2CM_SaveConfig
                                           ; SOURCE LINE # 172
0022 22                RET     
             ; FUNCTION I2CM_Sleep (END)

             ; FUNCTION I2CM_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 214
0000 904331            MOV     DPTR,#04331H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5404              ANL     A,#04H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 6026              JZ      ?C0006
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 218
000F 120000      E     LCALL   CyEnterCriticalSection
0012 900000      R     MOV     DPTR,#intState
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 219
0017 904331            MOV     DPTR,#04331H
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 54FB              ANL     A,#0FBH
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
0022 900000      R     MOV     DPTR,#intState
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 223
002A 900000      R     MOV     DPTR,#I2CM_backup+02H
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 9049D6            MOV     DPTR,#049D6H
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
0034 22                RET     
0035         ?C0006:
                                           ; SOURCE LINE # 227
C51 COMPILER V9.51   I2CM_PM                                                               10/28/2016 13:50:57 PAGE 9   

                                           ; SOURCE LINE # 240
0035 900000      R     MOV     DPTR,#I2CM_backup+01H
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 9049C8            MOV     DPTR,#049C8H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 241
003F 900000      R     MOV     DPTR,#I2CM_backup+02H
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 9049D6            MOV     DPTR,#049D6H
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
0049 900000      R     MOV     DPTR,#I2CM_backup+03H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 9049CA            MOV     DPTR,#049CAH
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
0053 900000      R     MOV     DPTR,#I2CM_backup+04H
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 9049DB            MOV     DPTR,#049DBH
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
005D 900000      R     MOV     DPTR,#I2CM_backup+05H
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 9049DC            MOV     DPTR,#049DCH
0065 EF                MOV     A,R7
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 265
0067         ?C0008:
0067 22                RET     
             ; FUNCTION I2CM_RestoreConfig (END)

             ; FUNCTION I2CM_Wakeup (BEGIN)
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
0000 120000      R     LCALL   I2CM_RestoreConfig
                                           ; SOURCE LINE # 305
0003 900000      R     MOV     DPTR,#I2CM_backup
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 6009              JZ      ?C0011
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
000B 120000      E     LCALL   I2CM_Enable
                                           ; SOURCE LINE # 308
000E 9044C1            MOV     DPTR,#044C1H
0011 7480              MOV     A,#080H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 315
C51 COMPILER V9.51   I2CM_PM                                                               10/28/2016 13:50:57 PAGE 10  

                                           ; SOURCE LINE # 316
0014         ?C0011:
0014 22                RET     
             ; FUNCTION I2CM_Wakeup (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    211    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
