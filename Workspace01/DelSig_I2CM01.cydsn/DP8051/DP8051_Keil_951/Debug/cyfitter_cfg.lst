C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2
                    -) PR(.\DP8051\DP8051_Keil_951\Debug/cyfitter_cfg.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: cyfitter_cfg.c
   3          * 
   4          * PSoC Creator  3.3
   5          *
   6          * Description:
   7          * This file contains device initialization code.
   8          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
   9          * This file is automatically generated by PSoC Creator.
  10          *
  11          ********************************************************************************
  12          * Copyright (c) 2007-2015 Cypress Semiconductor.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include "cytypes.h"
  20          #include "cydevice_trm.h"
  21          #include "cyfitter.h"
  22          #include "CyLib.h"
  23          #include "cyfitter_cfg.h"
  24          
  25          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  26          
  27          
  28          #if defined(__C51__) || defined(__CX51__)
  29                  #define CYPACKED
  30                  #define CYPACKED_ATTR
  31                  #define CYALIGNED
  32                  #define DMAINITSEC
  33              #define CY_CFG_UNUSED
  34                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  35          
  36          
  37          
  38                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  39                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  40                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  41          #else
                      #error Unsupported toolchain
              #endif
  44          
  45          
  46          
  47          /* Clock startup error codes                                                   */
  48          #define CYCLOCKSTART_NO_ERROR    0u
  49          #define CYCLOCKSTART_XTAL_ERROR  1u
  50          #define CYCLOCKSTART_32KHZ_ERROR 2u
  51          #define CYCLOCKSTART_PLL_ERROR   3u
  52          
  53          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 2   

  54          /*******************************************************************************
  55          * Function Name: CyClockStartupError
  56          ********************************************************************************
  57          * Summary:
  58          *  If an error is encountered during clock configuration (crystal startup error,
  59          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  60          *  the customer, this function will stop in an infinite loop.
  61          *
  62          * Parameters:
  63          *   void
  64          *
  65          * Return:
  66          *   void
  67          *
  68          *******************************************************************************/
  69          CY_CFG_UNUSED
  70          static void CyClockStartupError(uint8 errorCode);
  71          CY_CFG_UNUSED
  72          static void CyClockStartupError(uint8 errorCode)
  73          {
  74   1          /* To remove the compiler warning if errorCode not used.                */
  75   1          errorCode = errorCode;
  76   1      
  77   1          /* `#START CyClockStartupError` */
  78   1      
  79   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  80   1          /* we will end up here to allow the customer to implement something to  */
  81   1          /* deal with the clock condition.                                       */
  82   1      
  83   1          /* `#END` */
  84   1      
  85   1          /* If nothing else, stop here since the clocks have not started         */
  86   1          /* correctly.                                                           */
  87   1          while(1) {}
  88   1      }
  89          #endif
  90          
  91          /* IOPORT_7 Address: CYDEV_PRTDSI_PRT12_BASE Size (bytes): 6 */
  92          #define BS_IOPORT_7_VAL ((const uint8 CYFAR *)0x00080000u)
  93          
  94          /* IDMUX_IRQ Address: CYREG_IDMUX_IRQ_CTL0 Size (bytes): 8 */
  95          #define BS_IDMUX_IRQ_VAL ((const uint8 CYFAR *)0x00080008u)
  96          
  97          /* UDB_0_3_1_CONFIG Address: CYDEV_UCFG_B0_P5_U1_BASE Size (bytes): 128 */
  98          #define BS_UDB_0_3_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080010u)
  99          
 100          /* DSI0_0_HV_ROUTING Address: CYDEV_UCFG_DSI13_BASE + 0x00000080u Size (bytes): 128 */
 101          #define BS_DSI0_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080090u)
 102          
 103          /* DSISWITCH_0_1 Address: CYDEV_UCFG_DSI12_BASE Size (bytes): 128 */
 104          #define BS_DSISWITCH_0_1_VAL ((const uint8 CYFAR *)0x00080110u)
 105          
 106          /* DSI0_1_HV_ROUTING Address: CYDEV_UCFG_DSI12_BASE + 0x00000080u Size (bytes): 128 */
 107          #define BS_DSI0_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080190u)
 108          
 109          /* DSI0_2_HV_ROUTING Address: CYDEV_UCFG_DSI7_BASE + 0x00000080u Size (bytes): 128 */
 110          #define BS_DSI0_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080210u)
 111          
 112          /* DSISWITCH_0_3 Address: CYDEV_UCFG_DSI6_BASE Size (bytes): 128 */
 113          #define BS_DSISWITCH_0_3_VAL ((const uint8 CYFAR *)0x00080290u)
 114          
 115          /* DSI0_3_HV_ROUTING Address: CYDEV_UCFG_DSI6_BASE + 0x00000080u Size (bytes): 128 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 3   

 116          #define BS_DSI0_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080310u)
 117          
 118          /* DSI0_4_HV_ROUTING Address: CYDEV_UCFG_DSI5_BASE + 0x00000080u Size (bytes): 128 */
 119          #define BS_DSI0_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080390u)
 120          
 121          /* DSISWITCH_0_5 Address: CYDEV_UCFG_DSI4_BASE Size (bytes): 128 */
 122          #define BS_DSISWITCH_0_5_VAL ((const uint8 CYFAR *)0x00080410u)
 123          
 124          /* DSI0_5_HV_ROUTING Address: CYDEV_UCFG_DSI4_BASE + 0x00000080u Size (bytes): 128 */
 125          #define BS_DSI0_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080490u)
 126          
 127          /* UDB_1_0_HV_ROUTING Address: CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 128          #define BS_UDB_1_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080510u)
 129          
 130          /* UDB_2_0_HV_ROUTING Address: CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 131          #define BS_UDB_2_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080590u)
 132          
 133          /* UDB_1_1_HV_ROUTING Address: CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 134          #define BS_UDB_1_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080610u)
 135          
 136          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 137          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080690u)
 138          
 139          /* UDB_1_2_HV_ROUTING Address: CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 140          #define BS_UDB_1_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080710u)
 141          
 142          /* UDBSWITCH_0_3 Address: CYDEV_UCFG_B0_P5_ROUTE_BASE Size (bytes): 128 */
 143          #define BS_UDBSWITCH_0_3_VAL ((const uint8 CYFAR *)0x00080790u)
 144          
 145          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 146          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)0x00080810u)
 147          
 148          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080u Size (bytes): 128 */
 149          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080890u)
 150          
 151          /* DSISWITCH_1_1 Address: CYDEV_UCFG_DSI8_BASE Size (bytes): 128 */
 152          #define BS_DSISWITCH_1_1_VAL ((const uint8 CYFAR *)0x00080910u)
 153          
 154          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080u Size (bytes): 128 */
 155          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080990u)
 156          
 157          /* DSI3_2_HV_ROUTING Address: CYDEV_UCFG_DSI3_BASE + 0x00000080u Size (bytes): 128 */
 158          #define BS_DSI3_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080A10u)
 159          
 160          /* DSISWITCH_1_3 Address: CYDEV_UCFG_DSI2_BASE Size (bytes): 128 */
 161          #define BS_DSISWITCH_1_3_VAL ((const uint8 CYFAR *)0x00080A90u)
 162          
 163          /* DSI3_3_HV_ROUTING Address: CYDEV_UCFG_DSI2_BASE + 0x00000080u Size (bytes): 128 */
 164          #define BS_DSI3_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080B10u)
 165          
 166          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 167          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x00080B90u)
 168          
 169          /* IOPINS0_7 Address: CYREG_PRT12_DM0 Size (bytes): 8 */
 170          #define BS_IOPINS0_7_VAL ((const uint8 CYFAR *)0x00080B98u)
 171          
 172          /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 173          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x00080BA0u)
 174          
 175          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 176          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00080BA8u)
 177          
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 4   

 178          /* CYDEV_CLKDIST_ACFG0_CFG0 Address: CYREG_CLKDIST_ACFG0_CFG0 Size (bytes): 4 */
 179          #define BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL ((const uint8 CYFAR *)0x00080BB0u)
 180          
 181          
 182          /*******************************************************************************
 183          * Function Name: cfg_dma_init
 184          ********************************************************************************
 185          * Summary:
 186          *  This function is used to copy device configuration data from constant values
 187          *  stored in memory into the proper chip configuration registers using DMA.  It
 188          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 189          *
 190          * Parameters:  
 191          *   void
 192          *
 193          * Return:
 194          *   void
 195          *
 196          *******************************************************************************/
 197          static void cfg_dma_init(void);
 198          static void cfg_dma_init(void)
 199          {
 200   1              /* TD structure for big-endian systems. Requires 2-byte endian swap */
 201   1              CYPACKED struct td_t {
 202   1                      uint16 size;
 203   1                      uint8 flags;
 204   1                      uint8 next_td_ptr;
 205   1                      uint16 src;
 206   1                      uint16 dest;
 207   1              } CYPACKED_ATTR;
 208   1      
 209   1              /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 210   1              DMAINITSEC static const uint8 CYCODE CH1_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
             -, 0x00u };
 211   1      
 212   1              /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 213   1              DMAINITSEC static const uint8 CYCODE CH2_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x01u
             -, 0x00u };
 214   1      
 215   1              /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 216   1              DMAINITSEC static const uint8 CYCODE CH5_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x00u
             -, 0x00u };
 217   1      
 218   1              /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 219   1              DMAINITSEC static const uint8 CYCODE CH6_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x01u
             -, 0x00u };
 220   1      
 221   1              /* Initialization data for each DMA channel's TD registers */
 222   1              DMAINITSEC static const uint8 CYCODE DMA_TD_START_CMD[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x01u };
 223   1      
 224   1              CYALIGNED static uint32 CYXDATA DMA_ZERO_VAL;
 225   1      
 226   1              /* This table holds all of the initialization data necessary for the DMA
 227   1                 process to transfer data from the source location to the destination. */
 228   1              DMAINITSEC static const struct td_t CYCODE CFG_TD_LIST0[] = {
 229   1                      /* Size, Flags, Next, Source, Destination */
 230   1                      { 8u, 0x23u, 0x02u, (uint16)(uint32)(CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },      /* TD 1 */
 231   1                      { 8u, 0x23u, 0x03u, (uint16)(uint32)(CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },      /* TD 2 */
 232   1                      { 8u, 0x23u, 0x04u, (uint16)(uint32)(CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },      /* TD 3 */
 233   1                      { 8u, 0x23u, 0x05u, (uint16)(uint32)(CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },      /* TD 4 */
 234   1                      { 5u, 0x23u, 0x06u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },   /* TD 5 */
 235   1                      { 5u, 0x23u, 0x07u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },   /* TD 6 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 5   

 236   1                      { 5u, 0x23u, 0x08u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },   /* TD 7 */
 237   1                      { 5u, 0x23u, 0xFEu, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },   /* TD 8 */
 238   1                      { 21u, 0x22u, 0x0Au, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_I2C_XCFG) },       /* TD 9 */
 239   1                      { 64u, 0x22u, 0x0Bu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT3_DR) },        /* TD 10 */
 240   1                      { 16u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT15_DR) },       /* TD 11 */
 241   1                      { 2432u, 0x22u, 0x0Du, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },   /* TD 12 *
             -/
 242   1                      { 128u, 0x22u, 0x0Eu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P5_U0_BASE) },    /* TD 13 */
 243   1                      { 1152u, 0x22u, 0x0Fu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P5_ROUTE_BASE + 0x0000008
             -0u) },        /* TD 14 */
 244   1                      { 384u, 0x22u, 0x10u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },    /* TD 15 */
 245   1                      { 384u, 0x22u, 0x11u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P3_U0_BASE) },    /* TD 16 */
 246   1                      { 384u, 0x22u, 0x12u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },    /* TD 17 */
 247   1                      { 384u, 0x22u, 0x13u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P5_U0_BASE) },    /* TD 18 */
 248   1                      { 512u, 0x22u, 0x14u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) },        /* TD 19 */
 249   1                      { 128u, 0x22u, 0x15u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE) },        /* TD 20 */
 250   1                      { 128u, 0x22u, 0x16u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE) },        /* TD 21 */
 251   1                      { 128u, 0x22u, 0x17u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE) },        /* TD 22 */
 252   1                      { 128u, 0x22u, 0x18u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE) },       /* TD 23 */
 253   1                      { 32u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) }, /* TD 24 */
 254   1                      { 6u, 0x23u, 0xFEu, (uint16)(uint32)(BS_IOPORT_7_VAL), (uint16)(CYDEV_PRTDSI_PRT12_BASE) },     /* TD 25 */
 255   1                      { 8u, 0x23u, 0x1Bu, (uint16)(uint32)(BS_IDMUX_IRQ_VAL), (uint16)(CYREG_IDMUX_IRQ_CTL0) },       /* TD 26 */
 256   1                      { 128u, 0x23u, 0x1Cu, (uint16)(uint32)(BS_UDB_0_3_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P5_U1_BASE) },  /
             -* TD 27 */
 257   1                      { 128u, 0x23u, 0x1Du, (uint16)(uint32)(BS_DSI0_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE + 0x000
             -00080u) },        /* TD 28 */
 258   1                      { 128u, 0x23u, 0x1Eu, (uint16)(uint32)(BS_DSISWITCH_0_1_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },        /* TD 2
             -9 */
 259   1                      { 128u, 0x23u, 0x1Fu, (uint16)(uint32)(BS_DSI0_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE + 0x000
             -00080u) },        /* TD 30 */
 260   1                      { 128u, 0x23u, 0x20u, (uint16)(uint32)(BS_DSI0_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE + 0x0000
             -0080u) },        /* TD 31 */
 261   1                      { 128u, 0x23u, 0x21u, (uint16)(uint32)(BS_DSISWITCH_0_3_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE) }, /* TD 32
             - */
 262   1                      { 128u, 0x23u, 0x22u, (uint16)(uint32)(BS_DSI0_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE + 0x0000
             -0080u) },        /* TD 33 */
 263   1                      { 128u, 0x23u, 0x23u, (uint16)(uint32)(BS_DSI0_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE + 0x0000
             -0080u) },        /* TD 34 */
 264   1                      { 128u, 0x23u, 0x24u, (uint16)(uint32)(BS_DSISWITCH_0_5_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) }, /* TD 35
             - */
 265   1                      { 128u, 0x23u, 0x25u, (uint16)(uint32)(BS_DSI0_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE + 0x0000
             -0080u) },        /* TD 36 */
 266   1                      { 128u, 0x23u, 0x26u, (uint16)(uint32)(BS_UDB_1_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P5_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 37 */
 267   1                      { 128u, 0x23u, 0x27u, (uint16)(uint32)(BS_UDB_2_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 38 */
 268   1                      { 128u, 0x23u, 0x28u, (uint16)(uint32)(BS_UDB_1_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P4_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 39 */
 269   1                      { 128u, 0x23u, 0x29u, (uint16)(uint32)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 40 */
 270   1                      { 128u, 0x23u, 0x2Au, (uint16)(uint32)(BS_UDB_1_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P4_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 41 */
 271   1                      { 128u, 0x23u, 0x2Bu, (uint16)(uint32)(BS_UDBSWITCH_0_3_VAL), (uint16)(CYDEV_UCFG_B0_P5_ROUTE_BASE) },  /
             -* TD 42 */
 272   1                      { 128u, 0x23u, 0x2Cu, (uint16)(uint32)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) }, /* TD 43
             - */
 273   1                      { 128u, 0x23u, 0x2Du, (uint16)(uint32)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x0000
             -0080u) },        /* TD 44 */
 274   1                      { 128u, 0x23u, 0x2Eu, (uint16)(uint32)(BS_DSISWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE) }, /* TD 45
             - */
 275   1                      { 128u, 0x23u, 0x2Fu, (uint16)(uint32)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x0000
             -0080u) },        /* TD 46 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 6   

 276   1                      { 128u, 0x23u, 0x30u, (uint16)(uint32)(BS_DSI3_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE + 0x0000
             -0080u) },        /* TD 47 */
 277   1                      { 128u, 0x23u, 0x31u, (uint16)(uint32)(BS_DSISWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) }, /* TD 48
             - */
 278   1                      { 128u, 0x23u, 0xFEu, (uint16)(uint32)(BS_DSI3_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE + 0x0000
             -0080u) },        /* TD 49 */
 279   1              };
 280   1      
 281   1              DMA_ZERO_VAL = 0u;
 282   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG0, 0x10u);    /* set burstcnt */
 283   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_CFG, 0x01u);   /* enable ch0 */
 284   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_STATUS+1u), 0x00u);   /* set first TD to 0 */
 285   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD0, 49u*8u);       /* transfer size */
 286   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+2u), 0x01u);    /* set next TD to 1 */
 287   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+3u), 0xA3u);    /* set TD flags */
 288   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD1, (uint16)((uint32)CFG_TD_LIST0 & 0x0000FFFFu)); /
             -* set td0's src addr */
 289   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD1+2u), CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst a
             -ddr */
 290   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG1, (uint16)(CYDEV_FLS_BASE >> 16));  /* set ch0's src h
             -igh addr */
 291   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_CFGMEM0_CFG1+2u), (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));     /* se
             -t ch0's dst high addr */
 292   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_STATUS+1u), 0x09u);   /* ch1 first TD: 9 */
 293   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH2_BASIC_STATUS+1u), 0x0Cu);   /* ch2 first TD: 12 */
 294   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH5_BASIC_STATUS+1u), 0x19u);   /* ch5 first TD: 25 */
 295   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH6_BASIC_STATUS+1u), 0x1Au);   /* ch6 first TD: 26 */
 296   1      
 297   1              CY_CFG_MEMORY_BARRIER();
 298   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_ACTION, 0x01u); /* cpu_req */
 299   1              CY_CFG_MEMORY_BARRIER();
 300   1      
 301   1              /* Wait for all DMA transfers to complete */
 302   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 303   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 304   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 305   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 306   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 307   1      
 308   1      
 309   1      }
 310          /*******************************************************************************
 311          * Function Name: ClockSetup
 312          ********************************************************************************
 313          *
 314          * Summary:
 315          *  Performs the initialization of all of the clocks in the device based on the
 316          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 317          *  clocks and setting the necessary dividers to produce the desired frequency. 
 318          *
 319          * Parameters:
 320          *  void
 321          *
 322          * Return:
 323          *  void
 324          *
 325          *******************************************************************************/
 326          static void ClockSetup(void);
 327          static void ClockSetup(void)
 328          {
 329   1              uint32 timeout;
 330   1              uint8 pllLock;
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 7   

 331   1      
 332   1      
 333   1              /* Configure Digital Clocks based on settings from Clock DWR */
 334   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x0000u);
 335   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DCFG0_CFG0 + 0x2u), 0x50u);
 336   1      
 337   1              /* Configure Analog Clocks based on settings from Clock DWR */
 338   1              CYCONFIGCPY((void CYFAR *)(CYREG_CLKDIST_ACFG0_CFG0), (const void CYFAR *)(BS_CYDEV_CLKDIST_ACFG0_CFG0_VA
             -L), 4u);
 339   1      
 340   1              /* Configure ILO based on settings from Clock DWR */
 341   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 342   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 343   1      
 344   1              /* Configure IMO based on settings from Clock DWR */
 345   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 346   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 347   1      
 348   1              /* Configure PLL based on settings from Clock DWR */
 349   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 350   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 351   1              /* Wait up to 250us for the PLL to lock */
 352   1              pllLock = 0u;
 353   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 354   1              { 
 355   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 356   2                      CyDelayCycles(10u * 12u); /* Delay 10us based on 12MHz clock */
 357   2              }
 358   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 359   1              if (timeout == 0u)
 360   1              {
 361   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 362   2              }
 363   1      
 364   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 365   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 366   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 367   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 368   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 369   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 370   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 371   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_DLY1), 0x04u);
 372   1      
 373   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG2) | 0x01u
             -)));
 374   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG1), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG1) | 0x01u
             -)));
 375   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG0), ((CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x80u
             -)));
 376   1      }
 377          
 378          
 379          /* Analog API Functions */
 380          
 381          
 382          /*******************************************************************************
 383          * Function Name: AnalogSetDefault
 384          ********************************************************************************
 385          *
 386          * Summary:
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 8   

 387          *  Sets up the analog portions of the chip to default values based on chip
 388          *  configuration options from the project.
 389          *
 390          * Parameters:
 391          *  void
 392          *
 393          * Return:
 394          *  void
 395          *
 396          *******************************************************************************/
 397          static void AnalogSetDefault(void);
 398          static void AnalogSetDefault(void)
 399          {
 400   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 401   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 402   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 403   1              CY_SET_REG8((void CYXDATA *)CYREG_DAC2_SW3, 0x80u);
 404   1              CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x70u);
 405   1              CY_SET_REG8((void CYXDATA *)CYREG_BUS_SW0, 0x01u);
 406   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 407   1      }
 408          
 409          
 410          /*******************************************************************************
 411          * Function Name: SetAnalogRoutingPumps
 412          ********************************************************************************
 413          *
 414          * Summary:
 415          * Enables or disables the analog pumps feeding analog routing switches.
 416          * Intended to be called at startup, based on the Vdda system configuration;
 417          * may be called during operation when the user informs us that the Vdda voltage
 418          * crossed the pump threshold.
 419          *
 420          * Parameters:
 421          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 422          *
 423          * Return:
 424          *  void
 425          *
 426          *******************************************************************************/
 427          void SetAnalogRoutingPumps(uint8 enabled)
 428          {
 429   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 430   1              if (enabled != 0u)
 431   1              {
 432   2                      regValue |= 0x22u;
 433   2              }
 434   1              else
 435   1              {
 436   2                      regValue &= (uint8)~0x22u;
 437   2              }
 438   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 439   1      }
 440          
 441          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 442          int8 AMuxSeq_CYAMUXSIDE_A_curChannel = -1;
 443          
 444          void AMuxSeq_CYAMUXSIDE_A_DisconnectAll(void)
 445          {
 446   1              AMuxSeq_CYAMUXSIDE_A_curChannel = -1;
 447   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x00u);
 448   1              CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x70u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 9   

 449   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT1_AG, 0x00u);
 450   1      }
 451          
 452          #if defined(__C51__) || defined(__CX51__)
 453              #pragma OT(5, SPEED)
 454          #endif
 455          void AMuxSeq_CYAMUXSIDE_A_Next(void)
 456          {
 457   1              AMuxSeq_CYAMUXSIDE_A_curChannel++;
 458   1              switch (AMuxSeq_CYAMUXSIDE_A_curChannel)
 459   1              {
 460   2              case 8:
 461   2              default:
 462   2                      AMuxSeq_CYAMUXSIDE_A_curChannel = 0;
 463   2              case 0:
 464   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT1_AG, 0x00u);
 465   2                      CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x70u);
 466   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x01u);
 467   2                      break;
 468   2              case 1:
 469   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x02u);
 470   2                      break;
 471   2              case 2:
 472   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x04u);
 473   2                      break;
 474   2              case 3:
 475   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x08u);
 476   2                      CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x70u | 0x80u);
 477   2                      break;
 478   2              case 4:
 479   2                      CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x70u);
 480   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x10u);
 481   2                      break;
 482   2              case 5:
 483   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x20u);
 484   2                      break;
 485   2              case 6:
 486   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x40u);
 487   2                      break;
 488   2              case 7:
 489   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT0_AG, 0x00u);
 490   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT1_AG, 0x10u);
 491   2                      CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW0, 0x70u | 0x01u);
 492   2                      break;
 493   2              }
 494   1      }
 495          
 496          int8 AMuxSeq_CYAMUXSIDE_B_curChannel = -1;
 497          
 498          void AMuxSeq_CYAMUXSIDE_B_DisconnectAll(void)
 499          {
 500   1              AMuxSeq_CYAMUXSIDE_B_curChannel = -1;
 501   1              CY_SET_REG8((void CYXDATA *)CYREG_PRT2_AG, 0x00u);
 502   1              CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW4, 0x00u);
 503   1      }
 504          
 505          #if defined(__C51__) || defined(__CX51__)
 506              #pragma OT(5, SPEED)
 507          #endif
 508          void AMuxSeq_CYAMUXSIDE_B_Next(void)
 509          {
 510   1              AMuxSeq_CYAMUXSIDE_B_curChannel++;
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 10  

 511   1              switch (AMuxSeq_CYAMUXSIDE_B_curChannel)
 512   1              {
 513   2              case 8:
 514   2              default:
 515   2                      AMuxSeq_CYAMUXSIDE_B_curChannel = 0;
 516   2              case 0:
 517   2                      CY_SET_REG8((void CYXDATA *)CYREG_PRT2_AG, 0x80u);
 518   2                      CY_SET_REG8((void CYXDATA *)CYREG_DSM0_SW4, 0x08u);
 519   2                      break;
 520   2              case 1:
 521   2                      break;
 522   2              case 2:
 523   2                      break;
 524   2              case 3:
 525   2                      break;
 526   2              case 4:
 527   2                      break;
 528   2              case 5:
 529   2                      break;
 530   2              case 6:
 531   2                      break;
 532   2              case 7:
 533   2                      break;
 534   2              }
 535   1      }
 536          
 537          
 538          
 539          /*******************************************************************************
 540          * Function Name: cyfitter_cfg
 541          ********************************************************************************
 542          * Summary:
 543          *  This function is called by the start-up code for the selected device. It
 544          *  performs all of the necessary device configuration based on the design
 545          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 546          *  as Clocks and Pins as well as any component configuration that is necessary.
 547          *
 548          * Parameters:  
 549          *   void
 550          *
 551          * Return:
 552          *   void
 553          *
 554          *******************************************************************************/
 555          
 556          void cyfitter_cfg(void)
 557          {
 558   1      
 559   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 560   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 561   1              /* Setup clocks based on selections from Clock DWR */
 562   1              ClockSetup();
 563   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 564   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 565   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 566   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 567   1      
 568   1              {
 569   2                      cfg_dma_init();
 570   2      
 571   2                      /* Perform normal device configuration. Order is not critical for these items. */
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 11  

 572   2                      CY_SET_REG8((void CYXDATA *)(CYREG_DSM0_CR3), 0x0Au);
 573   2      
 574   2                      /* Enable digital routing */
 575   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 576   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 577   2      
 578   2                      /* Enable UDB array */
 579   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 580   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 581   2              }
 582   1      
 583   1      
 584   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 585   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (const void CYFAR *)(BS_IOPINS0_0_VAL), 8u);
 586   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT12_DM0), (const void CYFAR *)(BS_IOPINS0_7_VAL), 8u);
 587   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DM0), (const void CYFAR *)(BS_IOPINS0_1_VAL), 8u);
 588   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 589   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 590   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 591   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 592   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 593   1              {
 594   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 595   2              }
 596   1      
 597   1      
 598   1              /* Perform basic analog initialization to defaults */
 599   1              AnalogSetDefault();
 600   1      
 601   1              /* Configure alternate active mode */
 602   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 603   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 604   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 72
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 75
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 87
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 281
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#DMA_ZERO_VAL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 282
000E 907600            MOV     DPTR,#07600H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
0014 907010            MOV     DPTR,#07010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 284
001A 907019            MOV     DPTR,#07019H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 285
001F 7B02              MOV     R3,#02H
0021 7A78              MOV     R2,#078H
0023 7900              MOV     R1,#00H
0025 7D88              MOV     R5,#088H
0027 7C01              MOV     R4,#01H
0029 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 286
002C 907802            MOV     DPTR,#07802H
002F 7401              MOV     A,#01H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 287
0032 907803            MOV     DPTR,#07803H
0035 74A3              MOV     A,#0A3H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
0038 7B02              MOV     R3,#02H
003A 7A78              MOV     R2,#078H
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 13  

003C 7904              MOV     R1,#04H
003E C003              PUSH    AR3
0040 C002              PUSH    AR2
0042 C001              PUSH    AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0048 7900        R     MOV     R1,#LOW CFG_TD_LIST0
004A AF01              MOV     R7,AR1
004C AE02              MOV     R6,AR2
004E AD03              MOV     R5,AR3
0050 7C00              MOV     R4,#00H
0052 EF                MOV     A,R7
0053 54FF              ANL     A,#0FFH
0055 FF                MOV     R7,A
0056 EE                MOV     A,R6
0057 54FF              ANL     A,#0FFH
0059 FE                MOV     R6,A
005A ED                MOV     A,R5
005B 5400              ANL     A,#00H
005D FD                MOV     R5,A
005E EC                MOV     A,R4
005F 5400              ANL     A,#00H
0061 FC                MOV     R4,A
0062 AD07              MOV     R5,AR7
0064 AC06              MOV     R4,AR6
0066 D001              POP     AR1
0068 D002              POP     AR2
006A D003              POP     AR3
006C 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 289
006F 7B02              MOV     R3,#02H
0071 7A78              MOV     R2,#078H
0073 7906              MOV     R1,#06H
0075 7D08              MOV     R5,#08H
0077 7C78              MOV     R4,#078H
0079 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 290
007C 7B02              MOV     R3,#02H
007E 7A76              MOV     R2,#076H
0080 7904              MOV     R1,#04H
0082 7D10              MOV     R5,#010H
0084 7C00              MOV     R4,#00H
0086 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 291
0089 7B02              MOV     R3,#02H
008B 7A76              MOV     R2,#076H
008D 7906              MOV     R1,#06H
008F 7D00              MOV     R5,#00H
0091 7C00              MOV     R4,#00H
0093 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 292
0096 907029            MOV     DPTR,#07029H
0099 7409              MOV     A,#09H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
009C 907039            MOV     DPTR,#07039H
009F 740C              MOV     A,#0CH
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
00A2 907069            MOV     DPTR,#07069H
00A5 7419              MOV     A,#019H
00A7 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 14  

                                           ; SOURCE LINE # 295
00A8 907079            MOV     DPTR,#07079H
00AB 741A              MOV     A,#01AH
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
00AE 907014            MOV     DPTR,#07014H
00B1 7401              MOV     A,#01H
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 299
00B4         ?C0010:
                                           ; SOURCE LINE # 302
00B4 907018            MOV     DPTR,#07018H
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 EF                MOV     A,R7
00BA 5401              ANL     A,#01H
00BC FF                MOV     R7,A
00BD 7E00              MOV     R6,#00H
00BF EF                MOV     A,R7
00C0 4E                ORL     A,R6
00C1 70F1              JNZ     ?C0010
00C3         ?C0011:
00C3         ?C0012:
                                           ; SOURCE LINE # 303
00C3 907028            MOV     DPTR,#07028H
00C6 E0                MOVX    A,@DPTR
00C7 FF                MOV     R7,A
00C8 EF                MOV     A,R7
00C9 5401              ANL     A,#01H
00CB FF                MOV     R7,A
00CC 7E00              MOV     R6,#00H
00CE EF                MOV     A,R7
00CF 4E                ORL     A,R6
00D0 70F1              JNZ     ?C0012
00D2         ?C0013:
00D2         ?C0014:
                                           ; SOURCE LINE # 304
00D2 907038            MOV     DPTR,#07038H
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 EF                MOV     A,R7
00D8 5401              ANL     A,#01H
00DA FF                MOV     R7,A
00DB 7E00              MOV     R6,#00H
00DD EF                MOV     A,R7
00DE 4E                ORL     A,R6
00DF 70F1              JNZ     ?C0014
00E1         ?C0015:
00E1         ?C0016:
                                           ; SOURCE LINE # 305
00E1 907068            MOV     DPTR,#07068H
00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 EF                MOV     A,R7
00E7 5401              ANL     A,#01H
00E9 FF                MOV     R7,A
00EA 7E00              MOV     R6,#00H
00EC EF                MOV     A,R7
00ED 4E                ORL     A,R6
00EE 70F1              JNZ     ?C0016
00F0         ?C0017:
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 15  

00F0         ?C0018:
                                           ; SOURCE LINE # 306
00F0 907078            MOV     DPTR,#07078H
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
00F5 EF                MOV     A,R7
00F6 5401              ANL     A,#01H
00F8 FF                MOV     R7,A
00F9 7E00              MOV     R6,#00H
00FB EF                MOV     A,R7
00FC 4E                ORL     A,R6
00FD 70F1              JNZ     ?C0018
00FF         ?C0019:
                                           ; SOURCE LINE # 309
00FF         ?C0020:
00FF 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 334
0000 7B00              MOV     R3,#00H
0002 7A40              MOV     R2,#040H
0004 7980              MOV     R1,#080H
0006 7D00              MOV     R5,#00H
0008 7C00              MOV     R4,#00H
000A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 335
000D 904082            MOV     DPTR,#04082H
0010 7450              MOV     A,#050H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
0013 7B08              MOV     R3,#08H
0015 7A0B              MOV     R2,#0BH
0017 79B0              MOV     R1,#0B0H
0019 C003              PUSH    AR3
001B C002              PUSH    AR2
001D C001              PUSH    AR1
001F 7B00              MOV     R3,#00H
0021 7A41              MOV     R2,#041H
0023 7900              MOV     R1,#00H
0025 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0028 120000      E     LCALL   ?C?PSTXDATA
002B D001              POP     AR1
002D D002              POP     AR2
002F D003              POP     AR3
0031 7F04              MOV     R7,#04H
0033 7E00              MOV     R6,#00H
0035 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 341
0038 904300            MOV     DPTR,#04300H
003B 7402              MOV     A,#02H
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
003E 904000            MOV     DPTR,#04000H
0041 7408              MOV     A,#08H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 345
0044 904200            MOV     DPTR,#04200H
0047 7403              MOV     A,#03H
0049 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 16  

                                           ; SOURCE LINE # 346
004A 7B0C              MOV     R3,#0CH
004C 7A01              MOV     R2,#01H
004E 7908              MOV     R1,#08H
0050 120000      E     LCALL   _cyread8
0053 9046A1            MOV     DPTR,#046A1H
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 349
0058 7B00              MOV     R3,#00H
005A 7A42              MOV     R2,#042H
005C 7922              MOV     R1,#022H
005E 7D08              MOV     R5,#08H
0060 7C00              MOV     R4,#00H
0062 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 350
0065 7B00              MOV     R3,#00H
0067 7A42              MOV     R2,#042H
0069 7920              MOV     R1,#020H
006B 7D51              MOV     R5,#051H
006D 7C12              MOV     R4,#012H
006F 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 352
0072 900000      R     MOV     DPTR,#pllLock
0075 E4                CLR     A
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
0077 7F19              MOV     R7,#019H
0079 7E00              MOV     R6,#00H
007B 7D00              MOV     R5,#00H
007D 7C00              MOV     R4,#00H
007F 900000      R     MOV     DPTR,#timeout
0082 120000      E     LCALL   ?C?LSTXDATA
0085         ?C0021:
0085 900000      R     MOV     DPTR,#timeout
0088 120000      E     LCALL   ?C?LLDXDATA
008B D3                SETB    C
008C EF                MOV     A,R7
008D 9400              SUBB    A,#00H
008F EE                MOV     A,R6
0090 9400              SUBB    A,#00H
0092 404E              JC      ?C0022
0094 900000      R     MOV     DPTR,#pllLock
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A 6403              XRL     A,#03H
009C 6044              JZ      ?C0022
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
009E 904225            MOV     DPTR,#04225H
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 EF                MOV     A,R7
00A4 5401              ANL     A,#01H
00A6 FF                MOV     R7,A
00A7 7E00              MOV     R6,#00H
00A9 900000      R     MOV     DPTR,#pllLock
00AC E0                MOVX    A,@DPTR
00AD FE                MOV     R6,A
00AE EE                MOV     A,R6
00AF 25E0              ADD     A,ACC
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 17  

00B1 FE                MOV     R6,A
00B2 EE                MOV     A,R6
00B3 4F                ORL     A,R7
00B4 FF                MOV     R7,A
00B5 EF                MOV     A,R7
00B6 5403              ANL     A,#03H
00B8 FF                MOV     R7,A
00B9 900000      R     MOV     DPTR,#pllLock
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 356
00BE 7F78              MOV     R7,#078H
00C0 7E00              MOV     R6,#00H
00C2 7D00              MOV     R5,#00H
00C4 7C00              MOV     R4,#00H
00C6 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 357
00C9 900000      R     MOV     DPTR,#timeout
00CC 120000      E     LCALL   ?C?LLDXDATA
00CF 7BFF              MOV     R3,#0FFH
00D1 7AFF              MOV     R2,#0FFH
00D3 79FF              MOV     R1,#0FFH
00D5 78FF              MOV     R0,#0FFH
00D7 120000      E     LCALL   ?C?LADD
00DA 900000      R     MOV     DPTR,#timeout
00DD 120000      E     LCALL   ?C?LSTXDATA
00E0 80A3              SJMP    ?C0021
00E2         ?C0022:
                                           ; SOURCE LINE # 359
00E2 900000      R     MOV     DPTR,#timeout
00E5 120000      E     LCALL   ?C?LLDXDATA
00E8 EF                MOV     A,R7
00E9 4E                ORL     A,R6
00EA 7005              JNZ     ?C0024
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
00EC 7F03              MOV     R7,#03H
00EE 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 362
00F1         ?C0024:
                                           ; SOURCE LINE # 365
00F1 7B00              MOV     R3,#00H
00F3 7A40              MOV     R2,#040H
00F5 7904              MOV     R1,#04H
00F7 7D00              MOV     R5,#00H
00F9 7C01              MOV     R4,#01H
00FB 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 366
00FE 904004            MOV     DPTR,#04004H
0101 7407              MOV     A,#07H
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
0104 904006            MOV     DPTR,#04006H
0107 E4                CLR     A
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
0109 904008            MOV     DPTR,#04008H
010C 7448              MOV     A,#048H
010E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
010F 904004            MOV     DPTR,#04004H
0112 E4                CLR     A
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 18  

0113 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0114 904001            MOV     DPTR,#04001H
0117 7402              MOV     A,#02H
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
011A 90400B            MOV     DPTR,#0400BH
011D 7404              MOV     A,#04H
011F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
0120 9043A2            MOV     DPTR,#043A2H
0123 E0                MOVX    A,@DPTR
0124 FF                MOV     R7,A
0125 EF                MOV     A,R7
0126 4401              ORL     A,#01H
0128 FF                MOV     R7,A
0129 9043A2            MOV     DPTR,#043A2H
012C EF                MOV     A,R7
012D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 374
012E 9043A1            MOV     DPTR,#043A1H
0131 E0                MOVX    A,@DPTR
0132 FF                MOV     R7,A
0133 EF                MOV     A,R7
0134 4401              ORL     A,#01H
0136 FF                MOV     R7,A
0137 9043A1            MOV     DPTR,#043A1H
013A EF                MOV     A,R7
013B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
013C 9043A0            MOV     DPTR,#043A0H
013F E0                MOVX    A,@DPTR
0140 FF                MOV     R7,A
0141 EF                MOV     A,R7
0142 4480              ORL     A,#080H
0144 FF                MOV     R7,A
0145 9043A0            MOV     DPTR,#043A0H
0148 EF                MOV     A,R7
0149 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
014A 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 400
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 19  

001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
002F 905A93            MOV     DPTR,#05A93H
0032 7480              MOV     A,#080H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
0035 905B00            MOV     DPTR,#05B00H
0038 7470              MOV     A,#070H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
003B 905B58            MOV     DPTR,#05B58H
003E 7401              MOV     A,#01H
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
0041 905876            MOV     DPTR,#05876H
0044 7444              MOV     A,#044H
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
0047 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 427
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0027
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4422              ORL     A,#022H
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 20  

001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
0025 800E              SJMP    ?C0028
0027         ?C0027:
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54DD              ANL     A,#0DDH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
0035         ?C0028:
                                           ; SOURCE LINE # 438
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION AMuxSeq_CYAMUXSIDE_A_DisconnectAll (BEGIN)
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
                                           ; SOURCE LINE # 446
0000 900000      R     MOV     DPTR,#AMuxSeq_CYAMUXSIDE_A_curChannel
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 447
0006 90510D            MOV     DPTR,#0510DH
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
000B 905B00            MOV     DPTR,#05B00H
000E 7470              MOV     A,#070H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
0011 90511D            MOV     DPTR,#0511DH
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
0016 22                RET     
             ; FUNCTION AMuxSeq_CYAMUXSIDE_A_DisconnectAll (END)

             ; FUNCTION AMuxSeq_CYAMUXSIDE_A_Next (BEGIN)
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 457
0000 900000      R     MOV     DPTR,#AMuxSeq_CYAMUXSIDE_A_curChannel
0003 E0                MOVX    A,@DPTR
0004 04                INC     A
0005 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 21  

                                           ; SOURCE LINE # 458
0006 E0                MOVX    A,@DPTR
0007 B40800            CJNE    A,#08H,?C0058
000A         ?C0058:
000A 501F              JNC     ?C0033
000C 900000      R     MOV     DPTR,#?C0059
000F F8                MOV     R0,A
0010 28                ADD     A,R0
0011 28                ADD     A,R0
0012 73                JMP     @A+DPTR
0013         ?C0059:
0013 020000      R     LJMP    ?C0034
0016 020000      R     LJMP    ?C0035
0019 020000      R     LJMP    ?C0036
001C 020000      R     LJMP    ?C0037
001F 020000      R     LJMP    ?C0038
0022 020000      R     LJMP    ?C0039
0025 020000      R     LJMP    ?C0040
0028 020000      R     LJMP    ?C0041
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
                                           ; SOURCE LINE # 461
002B         ?C0033:
                                           ; SOURCE LINE # 462
002B E4                CLR     A
002C 900000      R     MOV     DPTR,#AMuxSeq_CYAMUXSIDE_A_curChannel
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
0030         ?C0034:
                                           ; SOURCE LINE # 464
0030 90511D            MOV     DPTR,#0511DH
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 465
0035 905B00            MOV     DPTR,#05B00H
0038 7470              MOV     A,#070H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 466
003B 90510D            MOV     DPTR,#0510DH
003E 7401              MOV     A,#01H
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
0041 22                RET     
                                           ; SOURCE LINE # 468
0042         ?C0035:
                                           ; SOURCE LINE # 469
0042 90510D            MOV     DPTR,#0510DH
0045 7402              MOV     A,#02H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0048 22                RET     
                                           ; SOURCE LINE # 471
0049         ?C0036:
                                           ; SOURCE LINE # 472
0049 90510D            MOV     DPTR,#0510DH
004C 7404              MOV     A,#04H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
004F 22                RET     
                                           ; SOURCE LINE # 474
0050         ?C0037:
                                           ; SOURCE LINE # 475
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 22  

0050 90510D            MOV     DPTR,#0510DH
0053 7408              MOV     A,#08H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 476
0056 905B00            MOV     DPTR,#05B00H
0059 74F0              MOV     A,#0F0H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
005C 22                RET     
                                           ; SOURCE LINE # 478
005D         ?C0038:
                                           ; SOURCE LINE # 479
005D 905B00            MOV     DPTR,#05B00H
0060 7470              MOV     A,#070H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 480
0063 90510D            MOV     DPTR,#0510DH
0066 7410              MOV     A,#010H
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
0069 22                RET     
                                           ; SOURCE LINE # 482
006A         ?C0039:
                                           ; SOURCE LINE # 483
006A 90510D            MOV     DPTR,#0510DH
006D 7420              MOV     A,#020H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
0070 22                RET     
                                           ; SOURCE LINE # 485
0071         ?C0040:
                                           ; SOURCE LINE # 486
0071 90510D            MOV     DPTR,#0510DH
0074 7440              MOV     A,#040H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
0077 22                RET     
                                           ; SOURCE LINE # 488
0078         ?C0041:
                                           ; SOURCE LINE # 489
0078 90510D            MOV     DPTR,#0510DH
007B E4                CLR     A
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
007D 90511D            MOV     DPTR,#0511DH
0080 7410              MOV     A,#010H
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
0083 905B00            MOV     DPTR,#05B00H
0086 7471              MOV     A,#071H
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
0089         ?C0042:
0089 22                RET     
             ; FUNCTION AMuxSeq_CYAMUXSIDE_A_Next (END)

             ; FUNCTION AMuxSeq_CYAMUXSIDE_B_DisconnectAll (BEGIN)
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 23  

0000 900000      R     MOV     DPTR,#AMuxSeq_CYAMUXSIDE_B_curChannel
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
0006 90512D            MOV     DPTR,#0512DH
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 502
000B 905B04            MOV     DPTR,#05B04H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 503
000F 22                RET     
             ; FUNCTION AMuxSeq_CYAMUXSIDE_B_DisconnectAll (END)

             ; FUNCTION AMuxSeq_CYAMUXSIDE_B_Next (BEGIN)
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
0000 900000      R     MOV     DPTR,#AMuxSeq_CYAMUXSIDE_B_curChannel
0003 E0                MOVX    A,@DPTR
0004 04                INC     A
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
0006 E0                MOVX    A,@DPTR
0007 600B              JZ      ?C0047
0009 24F8              ADD     A,#0F8H
000B 5013              JNC     ?C0055
000D 8000              SJMP    ?C0046
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
000F         ?C0046:
                                           ; SOURCE LINE # 515
000F E4                CLR     A
0010 900000      R     MOV     DPTR,#AMuxSeq_CYAMUXSIDE_B_curChannel
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 516
0014         ?C0047:
                                           ; SOURCE LINE # 517
0014 90512D            MOV     DPTR,#0512DH
0017 7480              MOV     A,#080H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 518
001A 905B04            MOV     DPTR,#05B04H
001D 7408              MOV     A,#08H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 24  

                                           ; SOURCE LINE # 535
0020         ?C0055:
0020 22                RET     
             ; FUNCTION AMuxSeq_CYAMUXSIDE_B_Next (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 560
0000 904800            MOV     DPTR,#04800H
0003 74F1              MOV     A,#0F1H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 562
0006 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 564
0009 904800            MOV     DPTR,#04800H
000C 74B1              MOV     A,#0B1H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 566
000F 7B00              MOV     R3,#00H
0011 7A46              MOV     R2,#046H
0013 79E8              MOV     R1,#0E8H
0015 120000      E     LCALL   _cyread8
0018 EF                MOV     A,R7
0019 4405              ORL     A,#05H
001B FD                MOV     R5,A
001C 7B00              MOV     R3,#00H
001E 7A46              MOV     R2,#046H
0020 79E8              MOV     R1,#0E8H
0022 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
0025 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 572
0028 905883            MOV     DPTR,#05883H
002B 740A              MOV     A,#0AH
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 575
002E 7B01              MOV     R3,#01H
0030 7A50              MOV     R2,#050H
0032 7903              MOV     R1,#03H
0034 120000      E     LCALL   _cyread8
0037 EF                MOV     A,R7
0038 4402              ORL     A,#02H
003A FD                MOV     R5,A
003B 7B01              MOV     R3,#01H
003D 7A50              MOV     R2,#050H
003F 7903              MOV     R1,#03H
0041 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 576
0044 7B01              MOV     R3,#01H
0046 7A50              MOV     R2,#050H
0048 7913              MOV     R1,#013H
004A 120000      E     LCALL   _cyread8
004D EF                MOV     A,R7
004E 4402              ORL     A,#02H
0050 FD                MOV     R5,A
0051 7B01              MOV     R3,#01H
0053 7A50              MOV     R2,#050H
0055 7913              MOV     R1,#013H
0057 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 579
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 25  

005A 9043A0            MOV     DPTR,#043A0H
005D E0                MOVX    A,@DPTR
005E 4440              ORL     A,#040H
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 580
0061 9043C2            MOV     DPTR,#043C2H
0064 E0                MOVX    A,@DPTR
0065 4410              ORL     A,#010H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 585
0068 7B08              MOV     R3,#08H
006A 7A0B              MOV     R2,#0BH
006C 7990              MOV     R1,#090H
006E 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0071 E4                CLR     A
0072 F0                MOVX    @DPTR,A
0073 A3                INC     DPTR
0074 7451              MOV     A,#051H
0076 F0                MOVX    @DPTR,A
0077 A3                INC     DPTR
0078 7402              MOV     A,#02H
007A F0                MOVX    @DPTR,A
007B 7F08              MOV     R7,#08H
007D 7E00              MOV     R6,#00H
007F 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 586
0082 7B08              MOV     R3,#08H
0084 7A0B              MOV     R2,#0BH
0086 7998              MOV     R1,#098H
0088 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
008B E4                CLR     A
008C F0                MOVX    @DPTR,A
008D A3                INC     DPTR
008E 7451              MOV     A,#051H
0090 F0                MOVX    @DPTR,A
0091 A3                INC     DPTR
0092 74C2              MOV     A,#0C2H
0094 F0                MOVX    @DPTR,A
0095 7F08              MOV     R7,#08H
0097 7E00              MOV     R6,#00H
0099 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 587
009C 7B08              MOV     R3,#08H
009E 7A0B              MOV     R2,#0BH
00A0 79A0              MOV     R1,#0A0H
00A2 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00A5 E4                CLR     A
00A6 F0                MOVX    @DPTR,A
00A7 A3                INC     DPTR
00A8 7451              MOV     A,#051H
00AA F0                MOVX    @DPTR,A
00AB A3                INC     DPTR
00AC 7412              MOV     A,#012H
00AE F0                MOVX    @DPTR,A
00AF 7F08              MOV     R7,#08H
00B1 7E00              MOV     R6,#00H
00B3 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 588
00B6 7B08              MOV     R3,#08H
00B8 7A0B              MOV     R2,#0BH
00BA 79A8              MOV     R1,#0A8H
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 26  

00BC 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00BF E4                CLR     A
00C0 F0                MOVX    @DPTR,A
00C1 A3                INC     DPTR
00C2 7451              MOV     A,#051H
00C4 F0                MOVX    @DPTR,A
00C5 A3                INC     DPTR
00C6 7422              MOV     A,#022H
00C8 F0                MOVX    @DPTR,A
00C9 7F08              MOV     R7,#08H
00CB 7E00              MOV     R6,#00H
00CD 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 589
00D0 9044F4            MOV     DPTR,#044F4H
00D3 7401              MOV     A,#01H
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 591
00D6 904322            MOV     DPTR,#04322H
00D9 E0                MOVX    A,@DPTR
00DA 4408              ORL     A,#08H
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
00DD 9046EC            MOV     DPTR,#046ECH
00E0 E0                MOVX    A,@DPTR
00E1 C3                CLR     C
00E2 9405              SUBB    A,#05H
00E4 5006              JNC     ?C0056
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
00E6 904689            MOV     DPTR,#04689H
00E9 743A              MOV     A,#03AH
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 595
00EC         ?C0056:
                                           ; SOURCE LINE # 599
00EC 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 602
00EF 7B00              MOV     R3,#00H
00F1 7A43              MOV     R2,#043H
00F3 79A0              MOV     R1,#0A0H
00F5 C003              PUSH    AR3
00F7 C002              PUSH    AR2
00F9 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00FC EB                MOV     A,R3
00FD F0                MOVX    @DPTR,A
00FE A3                INC     DPTR
00FF EA                MOV     A,R2
0100 F0                MOVX    @DPTR,A
0101 A3                INC     DPTR
0102 74B0              MOV     A,#0B0H
0104 F0                MOVX    @DPTR,A
0105 D002              POP     AR2
0107 D003              POP     AR3
0109 7F0E              MOV     R7,#0EH
010B 7E00              MOV     R6,#00H
010D 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 603
0110 9043B0            MOV     DPTR,#043B0H
0113 E0                MOVX    A,@DPTR
0114 54FD              ANL     A,#0FDH
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/28/2016 13:50:51 PAGE 27  

0117 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1231    ----
   CONSTANT SIZE    =    429    ----
   XDATA SIZE       =      6       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
