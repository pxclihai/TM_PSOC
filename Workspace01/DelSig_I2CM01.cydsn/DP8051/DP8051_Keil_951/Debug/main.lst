C51 COMPILER V9.51   MAIN                                                                  10/28/2016 13:50:51 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\main.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051\DP8051_Keil_951\D
                    -ebug/main.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\main.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: main.c
   3          *
   4          * Version: 1.0
   5          *
   6          * Description:
   7          *  This is source code for Example Project: 8-ch DelSig ADC with I2C Master.
   8          *
   9          * Parameters used:
  10          *  I2C Master
  11          *   Implementation        Fixed function
  12          *   Data rate            100kbps
  13          *   SDA SCL pin config  Open drain, drives low
  14          *   Pull-up resistors    2.67k each
  15          *
  16          *  Delta Sigma ADC
  17          *      Conversion mode     1-Multi Sample
  18          *    Resolution            16 bits
  19          *    Conversion Rate        5000 SPS
  20          *    Input mode            Differential
  21          *
  22          *  IDAC
  23          *    Polarity            Positive
  24          *    Range                0-31.875 uA
  25          *    Speed                Slow
  26          *    Current output        10 uA
  27          *
  28          *  Sequencing Max
  29          *    Mux type            Differential
  30          *    Channels            8
  31          *
  32          * In this project, data converted by the 8-channel, sequenced ADC is sent via
  33          * a I2C Master. The project is tested with a separate project containing a I2C
  34          * slave. The data output by the ADC is made visible on an Character LCD. This
  35          * can be used to verify the data received by the I2C slave which is also
  36          * displayed on an LCD screen.
  37          *
  38          ********************************************************************************
  39          * Copyright 2012, Cypress Semiconductor Corporation. All rights reserved.
  40          * This software is owned by Cypress Semiconductor Corporation and is protected
  41          * by and subject to worldwide patent and copyright laws and treaties.
  42          * Therefore, you may use this software only as provided in the license agreement
  43          * accompanying the software package from which you obtained this software.
  44          * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  45          * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  46          * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  47          *******************************************************************************/
  48          
  49          #include <device.h>
  50          
  51          /* The I2C Slave address by default in a PSoC device is 8 */
  52          #define I2C_SLAVE_ADDRESS    (8u)
  53          /* Set the write buffer length to be 16 bits or 2 bytes */
C51 COMPILER V9.51   MAIN                                                                  10/28/2016 13:50:51 PAGE 2   

  54          #define WR_BUFFER_SIZE       (2u)
  55          
  56          
  57          /*******************************************************************************
  58          * Function Name: main
  59          ********************************************************************************
  60          *
  61          * Summary:
  62          *  main function performs following functions:
  63          *   1. Starts all used components.
  64          *   2. Controls sequencing of ADC inputs.
  65          *   3. Reads ADC converted data, sends this data via a I2C Master.
  66          *   4. Displays ADC converted data on Character LCD.
  67          *
  68          * Parameters:
  69          *  None.
  70          *
  71          * Return:
  72          *  None.
  73          *
  74          *******************************************************************************/
  75          int main()
  76          {
  77   1          uint8 temp;
  78   1          uint8 sample_segment[WR_BUFFER_SIZE];
  79   1          uint16 sample_full;
  80   1      
  81   1          I2CM_Start();
  82   1          IDAC8_Start();
  83   1      
  84   1          /* The Start API for Mux sets it up, but disconnects all the channels.
  85   1           * To connect the first channel, call the 'AMuxSeq_Next' function.
  86   1           */
  87   1          AMuxSeq_Start();
  88   1          AMuxSeq_Next();
  89   1      
  90   1          /* The LCD will display the values read from ADC in hex */
  91   1      
  92   1      
  93   1          /* Enable global interrupts - required for I2C */
  94   1          CyGlobalIntEnable;
  95   1      
  96   1          for(;;)
  97   1          {
  98   2              ADC_DelSig_StartConvert();
  99   2              /* Wait until the ADC conversion is complete */
 100   2              ADC_DelSig_IsEndConversion(ADC_DelSig_WAIT_FOR_RESULT);
 101   2              /* Since the ADC conversion is complete, stop the conversion */
 102   2              ADC_DelSig_StopConvert();
 103   2              sample_full = ADC_DelSig_GetResult16();
 104   2              AMuxSeq_Next();
 105   2              sample_segment[0] = sample_full >> 8u & 0x00FFu;
 106   2              sample_segment[1] = sample_full & 0x00FFu;
 107   2      
 108   2              /* Attempt to initiate communication with the slave until the function
 109   2               * completes without error.
 110   2               */
 111   2              do
 112   2              {
 113   3                  /* The syntax below automatically writes a buffer of data to a slave
 114   3                   * device from start to stop.
 115   3                    */
C51 COMPILER V9.51   MAIN                                                                  10/28/2016 13:50:51 PAGE 3   

 116   3                  temp = I2CM_MasterWriteBuf(I2C_SLAVE_ADDRESS, (uint8 *)sample_segment,
 117   3                                              WR_BUFFER_SIZE, I2CM_MODE_COMPLETE_XFER);
 118   3              }
 119   2              while (temp != I2CM_MSTR_NO_ERROR);
 120   2      
 121   2              /* Wait for the data transfer to complete */
 122   2              while(I2CM_MasterStatus() & I2CM_MSTAT_XFER_INP);
 123   2      
 124   2              temp = I2CM_MasterClearStatus();
 125   2      
 126   2              LCD_Char_ClearDisplay();
 127   2      
 128   2              /* If there is an error while transferring data */
 129   2              if(temp & I2CM_MSTAT_ERR_XFER)
 130   2              {
 131   3                  /* Indicate the error */
 132   3                  LCD_Char_PrintString("I2C Error! ");
 133   3                  /* Place error handling code here */
 134   3              }
 135   2              else /* Write completed without error */
 136   2              {
 137   3                  /* For verification purposes, display the adcReading on the LCD */
 138   3                  LCD_Char_PrintString("0x");
 139   3                  LCD_Char_PrintInt16(sample_full);
 140   3              }
 141   2      
 142   2              /* Delay introduced for ease of reading LCD */
 143   2              CyDelay(2000u/*ms*/);
 144   2      
 145   2          }  /* End forever loop */
 146   1      } /* End main */
 147          
 148          
 149          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  10/28/2016 13:50:51 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 81
0000 120000      E     LCALL   I2CM_Start
                                           ; SOURCE LINE # 82
0003 120000      E     LCALL   IDAC8_Start
                                           ; SOURCE LINE # 87
0006 120000      E     LCALL   AMuxSeq_Start
                                           ; SOURCE LINE # 88
0009 120000      E     LCALL   AMuxSeq_Next
                                           ; SOURCE LINE # 94
000C D2AF              SETB    EA
000E 9044F4            MOV     DPTR,#044F4H
0011 74FD              MOV     A,#0FDH
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
0014         ?C0001:
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 98
0014 120000      E     LCALL   ADC_DelSig_StartConvert
                                           ; SOURCE LINE # 100
0017 7F00              MOV     R7,#00H
0019 120000      E     LCALL   _ADC_DelSig_IsEndConversion
                                           ; SOURCE LINE # 102
001C 120000      E     LCALL   ADC_DelSig_StopConvert
                                           ; SOURCE LINE # 103
001F 120000      E     LCALL   ADC_DelSig_GetResult16
0022 900000      R     MOV     DPTR,#sample_full
0025 EE                MOV     A,R6
0026 F0                MOVX    @DPTR,A
0027 A3                INC     DPTR
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 104
002A 120000      E     LCALL   AMuxSeq_Next
                                           ; SOURCE LINE # 105
002D 900000      R     MOV     DPTR,#sample_full
0030 E0                MOVX    A,@DPTR
0031 FE                MOV     R6,A
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EE                MOV     A,R6
0036 FF                MOV     R7,A
0037 7E00              MOV     R6,#00H
0039 EF                MOV     A,R7
003A 54FF              ANL     A,#0FFH
003C FF                MOV     R7,A
003D 900000      R     MOV     DPTR,#sample_segment
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0042 900000      R     MOV     DPTR,#sample_full
0045 E0                MOVX    A,@DPTR
0046 FE                MOV     R6,A
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
C51 COMPILER V9.51   MAIN                                                                  10/28/2016 13:50:51 PAGE 5   

004A EF                MOV     A,R7
004B 54FF              ANL     A,#0FFH
004D FF                MOV     R7,A
004E 900000      R     MOV     DPTR,#sample_segment+01H
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
0053         ?C0005:
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 116
0053 7B01              MOV     R3,#01H
0055 7A00        R     MOV     R2,#HIGH sample_segment
0057 7900        R     MOV     R1,#LOW sample_segment
0059 900000      E     MOV     DPTR,#?_I2CM_MasterWriteBuf?BYTE+04H
005C 7402              MOV     A,#02H
005E F0                MOVX    @DPTR,A
005F 900000      E     MOV     DPTR,#?_I2CM_MasterWriteBuf?BYTE+05H
0062 E4                CLR     A
0063 F0                MOVX    @DPTR,A
0064 7F08              MOV     R7,#08H
0066 120000      E     LCALL   _I2CM_MasterWriteBuf
0069 900000      R     MOV     DPTR,#temp
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
006E 900000      R     MOV     DPTR,#temp
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 70DD              JNZ     ?C0005
0076         ?C0006:
                                           ; SOURCE LINE # 122
0076 120000      E     LCALL   I2CM_MasterStatus
0079 7E00              MOV     R6,#00H
007B EF                MOV     A,R7
007C 20E2F7            JB      ACC.2,?C0006
007F         ?C0007:
                                           ; SOURCE LINE # 124
007F 120000      E     LCALL   I2CM_MasterClearStatus
0082 900000      R     MOV     DPTR,#temp
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
0087 7F01              MOV     R7,#01H
0089 120000      E     LCALL   _LCD_Char_WriteControl
                                           ; SOURCE LINE # 129
008C 900000      R     MOV     DPTR,#temp
008F E0                MOVX    A,@DPTR
0090 FF                MOV     R7,A
0091 EF                MOV     A,R7
0092 30E70B            JNB     ACC.7,?C0008
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 132
0095 7BFF              MOV     R3,#0FFH
0097 7A00        R     MOV     R2,#HIGH ?SC_0
0099 7900        R     MOV     R1,#LOW ?SC_0
009B 120000      E     LCALL   _LCD_Char_PrintString
                                           ; SOURCE LINE # 134
009E 8014              SJMP    ?C0009
00A0         ?C0008:
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 138
C51 COMPILER V9.51   MAIN                                                                  10/28/2016 13:50:51 PAGE 6   

00A0 7BFF              MOV     R3,#0FFH
00A2 7A00        R     MOV     R2,#HIGH ?SC_12
00A4 7900        R     MOV     R1,#LOW ?SC_12
00A6 120000      E     LCALL   _LCD_Char_PrintString
                                           ; SOURCE LINE # 139
00A9 900000      R     MOV     DPTR,#sample_full
00AC E0                MOVX    A,@DPTR
00AD FE                MOV     R6,A
00AE A3                INC     DPTR
00AF E0                MOVX    A,@DPTR
00B0 FF                MOV     R7,A
00B1 120000      E     LCALL   _LCD_Char_PrintInt16
                                           ; SOURCE LINE # 140
00B4         ?C0009:
                                           ; SOURCE LINE # 143
00B4 7FD0              MOV     R7,#0D0H
00B6 7E07              MOV     R6,#07H
00B8 7D00              MOV     R5,#00H
00BA 7C00              MOV     R4,#00H
00BC 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 145
00BF 020000      R     LJMP    ?C0001
00C2 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    195    ----
   CONSTANT SIZE    =     15    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
